package domain.a.not.wz.cipherdiary.data;

import android.content.ComponentName;
import android.content.ContentValues;
import android.content.pm.PackageManager;
import android.content.pm.ProviderInfo;
import android.database.ContentObserver;
import android.database.Cursor;
import android.net.Uri;
import android.os.Handler;
import android.os.HandlerThread;
import android.test.AndroidTestCase;

import net.sqlcipher.database.SQLiteDatabase;

import domain.a.not.wz.cipherdiary.data.utils.PollingCheck;

/**
 * Created by Wz on 026, May 26.
 */
public class TestProvider extends AndroidTestCase {
    public static final String LOG_TAG = TestProvider.class.getSimpleName();
    private static DiaryDbHelper mOpenHelper = null;
    private static String dbFileName = null;
    private static final String DIARY_NAME = "diaryName";
    private static final String DIARY_PASSWORD = "pass";
    private static final long TEST_DATE = DiaryProvider.getTimeInSeconds(2014, 1, 20);

    public void deleteAllRecords() {
        mContext.getContentResolver().delete(
                DiaryContract.DiaryEntry.CONTENT_URI,
                null,
                null
        );

        Cursor cursor = mContext.getContentResolver().query(
                DiaryContract.DiaryEntry.CONTENT_URI,
                null,
                null,
                null,
                null
        );
        assertEquals("Error: Records not deleted from table during delete", 0, cursor.getCount());
        cursor.close();
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        SQLiteDatabase.loadLibs(mContext);
        mOpenHelper = new DiaryDbHelper(mContext);
        dbFileName = mOpenHelper.createDb(DIARY_NAME, DIARY_PASSWORD);
        mOpenHelper.attachDB(dbFileName, DIARY_PASSWORD);
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
        mOpenHelper.deleteDB(dbFileName);
    }

    /*
            This test checks to make sure that the content provider is registered correctly.
         */
    public void testProviderRegistry() {
        PackageManager pm = mContext.getPackageManager();

        // We define the component name based on the package name from the context and the
        // WeatherProvider class.
        ComponentName componentName = new ComponentName(mContext.getPackageName(),
                DiaryProvider.class.getName());
        try {
            // Fetch the provider info using the component name from the PackageManager
            // This throws an exception if the provider isn't registered.
            ProviderInfo providerInfo = pm.getProviderInfo(componentName, 0);

            // Make sure that the registered authority matches the authority from the Contract.
            assertEquals("Error: WeatherProvider registered with authority: " + providerInfo.authority +
                            " instead of authority: " + DiaryContract.CONTENT_AUTHORITY,
                    providerInfo.authority, DiaryContract.CONTENT_AUTHORITY);
        } catch (PackageManager.NameNotFoundException e) {
            // I guess the provider isn't registered correctly.
            assertTrue("Error: WeatherProvider not registered at " + mContext.getPackageName(),
                    false);
        }
    }

    public void testGetType() {
        // content://domain.a.not.wz.cipherdiary/diary/
        String type = mContext.getContentResolver().getType(DiaryContract.DiaryEntry.CONTENT_URI);
        assertEquals("Error: the DiaryEntry CONTENT_URI should return DiaryEntry.CONTENT_TYPE",
                DiaryContract.DiaryEntry.CONTENT_TYPE, type);
    }

    public void testCreatingNewDiary() throws Exception {
        mOpenHelper.deleteDB(dbFileName);//delete db generated by setup

        TestContentObserver tco = getTestContentObserver();
        mContext.getContentResolver().registerContentObserver(DiaryContract.DiaryList.CONTENT_URI, true, tco);

        Uri newDiaryUri = DiaryContract.DiaryList.buildDiaryListNewUri(DIARY_NAME, DIARY_PASSWORD);
        Uri newDiaryResultUri = mContext.getContentResolver().insert(newDiaryUri, null);

        tco.waitForNotificationOrFail();;
        mContext.getContentResolver().unregisterContentObserver(tco);

        assertTrue("attach fail",newDiaryResultUri.getPathSegments().get(1).equals(DIARY_NAME));
    }

    public void testSelectingDiary()  throws Exception{
        testCreatingNewDiary();
        selectDiary();
    }

    //TODO: more test for creating new diaries, deleting, renaming

    public void selectDiary() {
        Uri newDiaryUri = DiaryContract.DiaryList.buildDiaryListSelectUri(dbFileName, DIARY_PASSWORD);
        Cursor cursor = mContext.getContentResolver().query(
                newDiaryUri,
                null,
                null,
                null,
                null
        );
        assertTrue("attach fail", cursor.moveToFirst());
    }

    static void validateCursor(String error, Cursor valueCursor, ContentValues expectedValues) {
        assertTrue("Empty cursor returned. " + error, valueCursor.moveToFirst());
        TestDb.validateCurrentRecord(error, valueCursor, expectedValues);
        valueCursor.close();
    }

    static class TestContentObserver extends ContentObserver {
        final HandlerThread mHT;
        boolean mContentChanged;

        static TestContentObserver getTestContentObserver() {
            HandlerThread ht = new HandlerThread("ContentObserverThread");
            ht.start();
            return new TestContentObserver(ht);
        }

        private TestContentObserver(HandlerThread ht) {
            super(new Handler(ht.getLooper()));
            mHT = ht;
        }

        // On earlier versions of Android, this onChange method is called
        @Override
        public void onChange(boolean selfChange) {
            onChange(selfChange, null);
        }

        @Override
        public void onChange(boolean selfChange, Uri uri) {
            mContentChanged = true;
        }

        public void waitForNotificationOrFail() {
            // Note: The PollingCheck class is taken from the Android CTS (Compatibility Test Suite).
            // It's useful to look at the Android CTS source for ideas on how to test your Android
            // applications.  The reason that PollingCheck works is that, by default, the JUnit
            // testing framework is not running on the main Android application thread.
            new PollingCheck(5000) {
                @Override
                protected boolean check() {
                    return mContentChanged;
                }
            }.run();
            mHT.quit();
        }
    }
    static TestContentObserver getTestContentObserver() {
        return TestContentObserver.getTestContentObserver();
    }
}
